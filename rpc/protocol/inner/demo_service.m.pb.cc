// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: demo_service.proto

#include "demo_service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

#include "mt/runner.h"

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace protocol {
}  // namespace protocol
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_demo_5fservice_2eproto = nullptr;
static const ::_pb::ServiceDescriptor* file_level_service_descriptors_demo_5fservice_2eproto[1];
const uint32_t TableStruct_demo_5fservice_2eproto::offsets[1] = {};
static constexpr ::_pbi::MigrationSchema* schemas = nullptr;
static constexpr ::_pb::Message* const* file_default_instances = nullptr;

const char descriptor_table_protodef_demo_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022demo_service.proto\022\010protocol\032\ndemo.pro"
  "to2;\n\013DemoService\022,\n\004Echo\022\021.protocol.Ech"
  "oReq\032\021.protocol.EchoRspB\003\200\001\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_demo_5fservice_2eproto_deps[1] = {
  &::descriptor_table_demo_2eproto,
};
static ::_pbi::once_flag descriptor_table_demo_5fservice_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_demo_5fservice_2eproto = {
    false, false, 116, descriptor_table_protodef_demo_5fservice_2eproto,
    "demo_service.proto",
    &descriptor_table_demo_5fservice_2eproto_once, descriptor_table_demo_5fservice_2eproto_deps, 1, 0,
    schemas, file_default_instances, TableStruct_demo_5fservice_2eproto::offsets,
    nullptr, file_level_enum_descriptors_demo_5fservice_2eproto,
    file_level_service_descriptors_demo_5fservice_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_demo_5fservice_2eproto_getter() {
  return &descriptor_table_demo_5fservice_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_demo_5fservice_2eproto(&descriptor_table_demo_5fservice_2eproto);
namespace protocol {

// ===================================================================

DemoService::~DemoService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* DemoService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_demo_5fservice_2eproto);
  return file_level_service_descriptors_demo_5fservice_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* DemoService::GetDescriptor() {
  return descriptor();
}

void DemoService::Echo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::protocol::EchoReq*,
                         ::protocol::EchoRsp*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Echo() not implemented.");
  done->Run();
}

void DemoService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_demo_5fservice_2eproto[0]);
  switch(method->index()) {
    case 0:
      Echo(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::protocol::EchoReq*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::protocol::EchoRsp*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& DemoService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::protocol::EchoReq::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& DemoService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::protocol::EchoRsp::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

DemoService_Stub::DemoService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
DemoService_Stub::DemoService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
DemoService_Stub::~DemoService_Stub() {
  if (owns_channel_) delete channel_;
}

void DemoService_Stub::Echo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::protocol::EchoReq* request,
                              ::protocol::EchoRsp* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

void DemoServiceImpl::Echo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::protocol::EchoReq* request,
                  ::protocol::EchoRsp* response,
                  ::google::protobuf::Closure* done) {
  mt::run(Echo(controller, *request, *response, done));
}

mt::Task<int> DemoServiceImpl::CallCoMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor *method,
                                            ::PROTOBUF_NAMESPACE_ID::RpcController *controller,
                                            const ::PROTOBUF_NAMESPACE_ID::Message &request,
                                            ::PROTOBUF_NAMESPACE_ID::Message &response,
                                            ::google::protobuf::Closure *done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_demo_5fservice_2eproto[0]);
  switch(method->index()) {
    case 0:
      co_return co_await Echo(controller,
             *::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::protocol::EchoReq*>(&request),
             *::PROTOBUF_NAMESPACE_ID::internal::DownCast<::protocol::EchoRsp*>(&response), done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
  co_return 0;
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
