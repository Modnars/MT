// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: demo_service.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "demo_service.pb.h"

#include <algorithm>

#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/wire_format.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace protocol {

namespace {

const ::google::protobuf::ServiceDescriptor *DemoService_descriptor_ = NULL;

}  // namespace

void protobuf_AssignDesc_demo_5fservice_2eproto() {
    protobuf_AddDesc_demo_5fservice_2eproto();
    const ::google::protobuf::FileDescriptor *file =
        ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName("demo_service.proto");
    GOOGLE_CHECK(file != NULL);
    DemoService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
    ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_, &protobuf_AssignDesc_demo_5fservice_2eproto);
}

void protobuf_RegisterTypes(const ::std::string &) {
    protobuf_AssignDescriptorsOnce();
}

}  // namespace

void protobuf_ShutdownFile_demo_5fservice_2eproto() { }

void protobuf_AddDesc_demo_5fservice_2eproto() {
    static bool already_here = false;
    if (already_here)
        return;
    already_here = true;
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    ::protocol::protobuf_AddDesc_demo_2eproto();
    ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
        "\n\022demo_service.proto\022\010protocol\032\ndemo.pro"
        "to2;\n\013DemoService\022,\n\004Echo\022\021.protocol.Ech"
        "oReq\032\021.protocol.EchoRspB\003\200\001\001",
        108);
    ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile("demo_service.proto", &protobuf_RegisterTypes);
    ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_demo_5fservice_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_demo_5fservice_2eproto {
    StaticDescriptorInitializer_demo_5fservice_2eproto() { protobuf_AddDesc_demo_5fservice_2eproto(); }
} static_descriptor_initializer_demo_5fservice_2eproto_;

// ===================================================================

DemoService::~DemoService() { }

const ::google::protobuf::ServiceDescriptor *DemoService::descriptor() {
    protobuf_AssignDescriptorsOnce();
    return DemoService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor *DemoService::GetDescriptor() {
    protobuf_AssignDescriptorsOnce();
    return DemoService_descriptor_;
}

void DemoService::Echo(::google::protobuf::RpcController *controller, const ::protocol::EchoReq *,
                       ::protocol::EchoRsp *, ::google::protobuf::Closure *done) {
    controller->SetFailed("Method Echo() not implemented.");
    done->Run();
}

void DemoService::CallMethod(const ::google::protobuf::MethodDescriptor *method,
                             ::google::protobuf::RpcController *controller, const ::google::protobuf::Message *request,
                             ::google::protobuf::Message *response, ::google::protobuf::Closure *done) {
    GOOGLE_DCHECK_EQ(method->service(), DemoService_descriptor_);
    switch (method->index()) {
        case 0:
            Echo(controller, ::google::protobuf::down_cast<const ::protocol::EchoReq *>(request),
                 ::google::protobuf::down_cast< ::protocol::EchoRsp *>(response), done);
            break;
        default:
            GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
            break;
    }
}

// AUTO GEN BEGIN
mt::Task<int> DemoService::Echo(::google::protobuf::RpcController *controller, const ::protocol::EchoReq &req,
                                ::protocol::EchoRsp &rsp, ::google::protobuf::Closure *done) {
    controller->SetFailed("Method Echo() not implemented.");
    done->Run();
    co_return 0;
}

mt::Task<int> DemoService::CallMethod(const ::google::protobuf::MethodDescriptor *method,
                                      ::google::protobuf::RpcController *controller,
                                      const ::google::protobuf::Message &request, ::google::protobuf::Message &response,
                                      ::google::protobuf::Closure *done) {
    GOOGLE_DCHECK_EQ(method->service(), DemoService_descriptor_);
    switch (method->index()) {
        case 0:
            co_return co_await Echo(controller, *::google::protobuf::down_cast<const ::protocol::EchoReq *>(&request),
                                    *::google::protobuf::down_cast< ::protocol::EchoRsp *>(&response), done);
            break;
        default:
            GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
            break;
    }
    co_return 0;
}
// AUTO GEN END

const ::google::protobuf::Message &DemoService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor *method) const {
    GOOGLE_DCHECK_EQ(method->service(), descriptor());
    switch (method->index()) {
        case 0:
            return ::protocol::EchoReq::default_instance();
        default:
            GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
            return *reinterpret_cast< ::google::protobuf::Message *>(NULL);
    }
}

const ::google::protobuf::Message &DemoService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor *method) const {
    GOOGLE_DCHECK_EQ(method->service(), descriptor());
    switch (method->index()) {
        case 0:
            return ::protocol::EchoRsp::default_instance();
        default:
            GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
            return *reinterpret_cast< ::google::protobuf::Message *>(NULL);
    }
}

DemoService_Stub::DemoService_Stub(::google::protobuf::RpcChannel *channel)
    : channel_(channel), owns_channel_(false) { }
DemoService_Stub::DemoService_Stub(::google::protobuf::RpcChannel *channel,
                                   ::google::protobuf::Service::ChannelOwnership ownership)
    : channel_(channel), owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) { }
DemoService_Stub::~DemoService_Stub() {
    if (owns_channel_)
        delete channel_;
}

void DemoService_Stub::Echo(::google::protobuf::RpcController *controller, const ::protocol::EchoReq *request,
                            ::protocol::EchoRsp *response, ::google::protobuf::Closure *done) {
    channel_->CallMethod(descriptor()->method(0), controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

// @@protoc_insertion_point(global_scope)
